{"remainingRequest":"E:\\code\\vue\\screen-vue-datav\\node_modules\\thread-loader\\dist\\cjs.js!E:\\code\\vue\\screen-vue-datav\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\vue\\screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\code\\vue\\screen-vue-datav\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue\\screen-vue-datav\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue","mtime":1716778788376},{"path":"E:\\code\\vue\\screen-vue-datav\\babel.config.js","mtime":1710123821000},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716778783793},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1716778783793},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\babel-loader\\lib\\index.js","mtime":1716778784730},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716778783793},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\vue-loader\\lib\\index.js","mtime":1716778785207}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","config","type","Object","default","_default","data","ref","defaultConfig","rowNum","waitTime","carousel","unit","sort","valueFormatter","mergedConfig","rowsData","rows","heights","animationIndex","animationHandler","updater","watch","stopAnimation","calcData","methods","afterAutoResizeMixinInit","onResize","calcHeights","mergeConfig","calcRowsData","animation","_this$mergedConfig","_ref","_ref2","a","value","b","map","_ref3","min","Math","apply","_toConsumableArray","minAbs","abs","max","maxAbs","total","row","i","_objectSpread","ranking","percent","rowLength","length","concat","d","scroll","onresize","arguments","undefined","height","avgHeight","Array","fill","_arguments","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$heights","start","animationNum","back","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","setTimeout","slice","push","splice","stop","clearTimeout","destroyed"],"sources":["node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\n    <div\n      class=\"row-item\"\n      v-for=\"(item, i) in rows\"\n      :key=\"item.toString() + item.scroll\"\n      :style=\"`height: ${heights[i]}px;`\"\n    >\n      <div class=\"ranking-info\">\n        <div class=\"rank\">No.{{ item.ranking }}</div>\n        <div class=\"info-name\" v-html=\"item.name\" />\n        <div class=\"ranking-value\">{{ mergedConfig.valueFormatter ? mergedConfig.valueFormatter(item) : item.value + mergedConfig.unit }}</div>\n      </div>\n\n      <div class=\"ranking-column\">\n        <div\n          class=\"inside-column\"\n          :style=\"`width: ${item.percent}%;`\"\n        >\n          <div class=\"shine\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-ranking-board',\n\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true,\n        /**\n         * @description Value formatter\n         * @type {Function}\n         * @default valueFormatter = null\n         */\n        valueFormatter: null\n      },\n\n      mergedConfig: null,\n\n      rowsData: [],\n\n      rows: [],\n\n      heights: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcHeights(true)\n    },\n    calcData () {\n      const { mergeConfig, calcRowsData } = this\n\n      mergeConfig()\n\n      calcRowsData()\n\n      const { calcHeights } = this\n\n      calcHeights()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcRowsData () {\n      let { data, rowNum, sort } = this.mergedConfig\n\n      sort && data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const value = data.map(({ value }) => value)\n      \n      const min = Math.min(...value) || 0\n\n      // abs of min\n      const minAbs = Math.abs(min)\n\n      const max = Math.max(...value) || 0\n\n      // abs of max\n      const maxAbs = Math.abs(max)\n\n      const total = max + minAbs\n\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: (row.value + minAbs) / total * 100 }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig } = this\n\n      const { rowNum, data } = mergedConfig\n\n      const avgHeight = height / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"],"mappings":"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","ignoreList":[]}]}