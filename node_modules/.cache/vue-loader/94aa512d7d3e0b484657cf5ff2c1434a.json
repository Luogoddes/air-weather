{"remainingRequest":"E:\\code\\vue\\screen-vue-datav\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue\\screen-vue-datav\\src\\components\\echart\\center\\air-quality-forecast\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\code\\vue\\screen-vue-datav\\src\\components\\echart\\center\\air-quality-forecast\\index.vue","mtime":1717930924811},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716778783793},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1716778783793},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\babel-loader\\lib\\index.js","mtime":1716778784730},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1716778783793},{"path":"E:\\code\\vue\\screen-vue-datav\\node_modules\\vue-loader\\lib\\index.js","mtime":1716778785207}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IENoYXJ0IGZyb20gJy4vY2hhcnQudnVlJzsKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZSh7CiAgICAgIHJlZ2lvbjogc3RhdGUgPT4gc3RhdGUucmVnaW9uLAogICAgfSksCiAgfSwKICB3YXRjaDogewogICAgJ3JlZ2lvbi5pZCc6IGZ1bmN0aW9uIChuZXdJZCkgewogICAgICBpZiAobmV3SWQpIHsKICAgICAgICAvL2FsZXJ0KCLnqbrmsJTotKjph4815aSpIOebkeWQrOWIsOWcsOWMuuWAvOaUueWPmDoiICsgbmV3SWQpCiAgICAgICAgdGhpcy5nZXRBaXJRdWF0aWx5SW5mbyhuZXdJZCk7CiAgICAgIH0KICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICBpZiAodGhpcy5yZWdpb24uaWQpIHsKICAgICAgLy9hbGVydCgi56m65rCU6LSo6YePNeWkqSDmnIkiKQogICAgICB0aGlzLmdldEFpclF1YXRpbHlJbmZvKHRoaXMucmVnaW9uLmlkKTsKICAgIH0KICAgIC8vIGVsc2UgewogICAgLy8gICBhbGVydCgi56m65rCU6LSo6YePNeWkqSDmsqHmnIkiKQogICAgLy8gfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNkYXRhOiB7CiAgICAgICAgdGltZTogWyc2LzcnLCAnNi84JywgJzYvOScsICc2LzEwJywgJzExLzExJ10sCiAgICAgICAgY3VycmVudF9kYXRhOiBbNDE5LCAyNzAsIDQ0MCwgMzcwLCA0NTldLAogICAgICAgIHRydWVfZGF0YTogWzgxLCAyMzAsIDYwLCAxMzAsIDQxXSwgLy/ov5nkuKrmlbDmja7mmK/nqbrmsJTotKjph4/nmoTnnJ/lrp5hcWnvvIzkuIrpnaLpgqPmmK/mmK/ku5bnmoTooaXvvIzkuZ/lsLHmmK81MDAgLSB0cnVlX2RhdGEKICAgICAgfQogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgQ2hhcnQsCiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRBaXJRdWF0aWx5SW5mbyhsb2NhdGlvbikgewogICAgICBheGlvcy5nZXQoYGh0dHBzOi8vZGV2YXBpLnF3ZWF0aGVyLmNvbS92Ny9haXIvNWQ/bG9jYXRpb249JHtsb2NhdGlvbn0ma2V5PSR7dGhpcy4kYXBpS2V5fWApCiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgLy9jb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YS5ub3c7CiAgICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PeepuuawlOi0qOmHjzXlpKk9PT09PT0iKTsKICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5kYWlseSk7CiAgICAgICAgICAKICAgICAgICAgIHRoaXMuY2RhdGEudGltZSA9IHJlc3BvbnNlLmRhdGEuZGFpbHkubWFwKGl0ZW0gPT4gdGhpcy5mb3JtYXREYXRlKGl0ZW0uZnhEYXRlKSk7CiAgICAgICAgICB0aGlzLmNkYXRhLnRydWVfZGF0YSA9IHJlc3BvbnNlLmRhdGEuZGFpbHkubWFwKGl0ZW0gPT4gcGFyc2VJbnQoaXRlbS5hcWkpKTsKICAgICAgICAgIHRoaXMuY2RhdGEuY3VycmVudF9kYXRhID0gcmVzcG9uc2UuZGF0YS5kYWlseS5tYXAoaXRlbSA9PiA1MDAgLSBwYXJzZUludChpdGVtLmFxaSkpOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFpci1xdWFsaXR5IGluZm86JywgZXJyb3IpOwogICAgICAgIH0pOwogICAgfSwKICAgIGZvcm1hdERhdGUoZGF0ZVN0cmluZykgewogICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cmluZyk7CiAgICAgIHJldHVybiBgJHtkYXRlLmdldE1vbnRoKCkgKyAxfS8ke2RhdGUuZ2V0RGF0ZSgpfWA7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/echart/center/air-quality-forecast","sourcesContent":["<template>\n  <div>\n    <Chart :cdata=\"cdata\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Chart from './chart.vue';\nimport { mapState } from 'vuex';\nexport default {\n  computed: {\n    ...mapState({\n      region: state => state.region,\n    }),\n  },\n  watch: {\n    'region.id': function (newId) {\n      if (newId) {\n        //alert(\"空气质量5天 监听到地区值改变:\" + newId)\n        this.getAirQuatilyInfo(newId);\n      }\n    }\n  },\n  mounted() {\n    if (this.region.id) {\n      //alert(\"空气质量5天 有\")\n      this.getAirQuatilyInfo(this.region.id);\n    }\n    // else {\n    //   alert(\"空气质量5天 没有\")\n    // }\n  },\n  data() {\n    return {\n      cdata: {\n        time: ['6/7', '6/8', '6/9', '6/10', '11/11'],\n        current_data: [419, 270, 440, 370, 459],\n        true_data: [81, 230, 60, 130, 41], //这个数据是空气质量的真实aqi，上面那是是他的补，也就是500 - true_data\n      }\n    }\n  },\n  components: {\n    Chart,\n  },\n  methods: {\n    getAirQuatilyInfo(location) {\n      axios.get(`https://devapi.qweather.com/v7/air/5d?location=${location}&key=${this.$apiKey}`)\n        .then(response => {\n          //const data = response.data.now;\n          console.log(\"=======空气质量5天======\");\n          //console.log(response.data.daily);\n          \n          this.cdata.time = response.data.daily.map(item => this.formatDate(item.fxDate));\n          this.cdata.true_data = response.data.daily.map(item => parseInt(item.aqi));\n          this.cdata.current_data = response.data.daily.map(item => 500 - parseInt(item.aqi));\n        })\n        .catch(error => {\n          console.error('Error fetching air-quality info:', error);\n        });\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return `${date.getMonth() + 1}/${date.getDate()}`;\n    }\n  }\n}\n</script>"]}]}